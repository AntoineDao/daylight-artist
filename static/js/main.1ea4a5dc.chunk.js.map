{"version":3,"sources":["components/ToggleCard/index.js","components/DrawControl/index.js","components/SketchBoard/index.js","App.js","serviceWorker.js","index.js"],"names":["styles","card","margin","ColourControl","props","toggle","setState","expand","state","bind","Card","style","CardHeader","title","this","subheader","CardContent","children","Component","withStyles","marks","value","label","valuetext","colorMap","DrawControl","handleToolChange","event","setTool","target","wall","tool","handleHeightChange","setLineColor","window","height","undo","_sketch","canUndo","canRedo","type","Tools","Line","handleSurfaceChange","console","log","options","classes","className","TextField","select","defaultValue","onChange","helperText","MenuItem","key","Rectangle","Typography","variant","Slider","getAriaValueText","aria-labelledby","step","min","max","valueLabelDisplay","ToggleCard","Button","disabled","onClick","clear","predict","RadioGroup","aria-label","name","group","row","display","FormControlLabel","control","Radio","theme","width","flexWrap","flexDirection","SketchBoard","_selectTool","enableRemoveSelected","Select","enableCopyPaste","_save","drawings","push","toDataURL","_download","save","JSON","stringify","toJSON","imgDown","refs","Event","href","download","dispatchEvent","_removeMe","index","splice","redo","setBackgroundFromDataUrl","controlledValue","backgroundColor","fillWithBackgroundColor","_removeSelected","removeSelected","_onSketchChange","prev","now","_onBackgroundImageDrop","accepted","length","sketch","reader","FileReader","stretched","stretchedX","stretchedY","originX","originY","addEventListener","result","readAsDataURL","_addText","addText","text","color","lineColor","componentDidMount","data","filename","undefined","blob","Blob","e","document","createEvent","a","createElement","URL","createObjectURL","dataset","downloadurl","join","initMouseEvent","error","alert","lineWidth","fillColor","shadowWidth","shadowOffset","fillWithColor","controlledSize","sketchWidth","sketchHeight","imageUrl","expandTools","expandControls","expandColors","expandBack","expandImages","expandControlled","ref","c","forceValue","App","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.1ea4a5dc.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport Card from '@material-ui/core/Card';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardHeader from '@material-ui/core/CardHeader';\n// import IconButton from '@material-ui/core/IconButton';\n// import ExpandMore from '@material-ui/icons/ExpandMore';\n// import Collapse from '@material-ui/core/Collapse';\n// import { CompactPicker } from 'react-color';\n// import FormControlLabel from '@material-ui/core/FormControlLabel';\n// import Switch from '@material-ui/core/Switch';\nimport { withStyles } from '@material-ui/styles';\n\nconst styles = {\n  card: {\n    margin: '10px 10px 5px 0'\n  }\n};\n\nclass ColourControl extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.toggle = this.toggle.bind(this);\n\n    this.state = {\n      expand: false\n    }\n  }\n\n  toggle = () => {\n    this.setState({ expand: !this.state.expand });\n  }\n    \n\n  render() {\n    return (\n    <Card style={styles.card}>\n        <CardHeader\n          title={this.props.title}\n          subheader={this.props.subheader}\n          // action={\n          //     <IconButton\n          //       onClick={(e) => this.toggle()}>\n          //       <ExpandMore />\n          //     </IconButton>\n          // } \n          />\n        {/* <Collapse in={this.state.expand}> */}\n          <CardContent>\n            {this.props.children}\n          </CardContent>\n        {/* </Collapse> */}\n    </Card>\n    );\n  }\n}\n\nexport default withStyles(styles)(ColourControl);","import React, { Component } from 'react';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport ToggleCard from '../ToggleCard';\nimport { Tools } from 'react-sketch';\n\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\nimport TextField from '@material-ui/core/TextField';\nimport MenuItem from '@material-ui/core/MenuItem';\nimport Slider from '@material-ui/core/Slider';\nimport Typography from '@material-ui/core/Typography';\nimport { withStyles } from '@material-ui/styles';\n\nimport Clear from '@material-ui/icons/Clear'\nimport Undo from '@material-ui/icons/Undo'\nimport BlurOn from '@material-ui/icons/BlurOn'\nimport Button from '@material-ui/core/Button';\n\nconst styles = theme => ({\n  group: {\n    width: 'auto',\n    height: 'auto',\n    display: 'flex',\n    flexWrap: 'nowrap',\n    flexDirection: 'row',\n  }\n});\n\nconst marks = [\n  {\n    value: 0,\n    label: '0 m'\n  },\n  {\n    value: 0.5,\n    label: '0.5 m'\n  },\n  {\n    value: 1,\n    label: '1 m'\n  },\n  {\n    value: 1.5,\n    label: '1.5 m'\n  },\n  {\n    value: 2,\n    label: '2 m'\n  },\n  {\n    value: 2.5,\n    label: '2.5 m'\n  },\n  {\n    value: 3,\n    label: '3 m'\n  },\n]\n\nconst valuetext = (value) => {\n  return `${value} m`\n}\n\nconst colorMap = {\n  \"0\": 'black',\n  \"0.5\": 'blue',\n  \"1\": 'green',\n  \"1.5\": 'red',\n  \"2\": 'yellow',\n  \"2.5\": 'purple',\n  \"3\": 'orange',\n}\n\nclass DrawControl extends Component {\n  constructor(props) {\n    super(props);\n    \n    this.state = {\n      type: 'wall',\n      wall: {\n        tool: Tools.Line\n      },\n      window: {\n        height: 1.5\n      },\n    }\n\n    this.handleSurfaceChange = this.handleSurfaceChange.bind(this);\n    this.handleToolChange = this.handleToolChange.bind(this);\n    this.handleHeightChange = this.handleHeightChange.bind(this);\n  }\n  \n  handleSurfaceChange(event) {\n    switch (event.target.value) {\n      case 'wall':\n        this.props.setTool(this.state.wall.tool);\n        this.props.setLineColor('black');\n        break;\n\n      case 'window':\n        this.props.setTool(Tools.Line);\n        this.props.setLineColor(colorMap[this.state.window.height]);\n        break;\n\n      default:\n        console.log(event.target.value);\n        break;      \n    }\n    this.setState({ type: event.target.value });\n  }\n\n  handleToolChange = (event) => {\n    this.props.setTool(event.target.value);\n    this.setState({ wall: { tool: event.target.value } })\n  }\n\n  handleHeightChange = (event, value) => {\n    this.props.setLineColor(colorMap[value]);\n    this.setState({ window: { height: value } });\n  }\n\n  undo = () => {\n    this._sketch.undo();\n    this.setState({\n      canUndo: this._sketch.canUndo(),\n      canRedo: this._sketch.canRedo(),\n    });\n  };\n  \n  render() {\n    const { classes } = this.props;\n    let options;\n\n    switch (this.state.type) {\n      case 'wall':\n        options = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <TextField\n                select={true}\n                label=\"Drawing Tool\"\n                defaultValue=\"Line\"\n                value={this.state.wall.tool}\n                onChange={this.handleToolChange}\n                helperText=\"Please select a Tool\">\n                <MenuItem value={Tools.Line} key=\"Line\">Line</MenuItem>\n                <MenuItem value={Tools.Rectangle} key=\"Rectangle\">Rectangle</MenuItem>\n              </TextField>\n            </div>\n          </div>\n        )\n        break;\n\n      case 'window':\n        options = (\n          <div className=\"row\">\n            <div className=\"col-lg-12\">\n              <Typography variant=\"subtitle1\">Window Height</Typography>\n              <Slider\n                defaultValue={1.5}\n                getAriaValueText={valuetext}\n                aria-labelledby=\"discrete-slider-small-steps\"\n                step={0.5}\n                onChange={this.handleHeightChange}\n                marks={marks}\n                min={0}\n                max={3}\n                valueLabelDisplay=\"off\"\n              />\n              </div>\n            </div>\n        );\n        break;\n\n      default:\n        options = null;\n        break;\n    }\n\n    return (\n      <ToggleCard title=\"Drawing Controls\" subheader=\"Pick a surface type and start drawing!\">\n        <Button disabled={!this.props.canUndo} onClick={this.props.undo}>\n          <Undo/> Undo\n        </Button>\n        <Button disabled={!this.props.canUndo} onClick={this.props.clear}>\n          <Clear/> Clear\n        </Button>\n        <Button disabled={!this.props.canUndo} onClick={this.props.predict}>\n          <BlurOn/> Predict\n        </Button>\n        <Typography variant=\"h5\">Surface Type</Typography>\n        <RadioGroup\n          aria-label=\"type\"\n          name=\"type\"\n          className={classes.group}\n          row\n          style={{ display: 'flex' }}\n          value={this.type}\n          onChange={this.handleSurfaceChange}\n          defaultValue={this.state.type}\n        >\n          <FormControlLabel value=\"wall\" control={<Radio />} label=\"Wall\" />\n          <FormControlLabel value=\"window\" control={<Radio />} label=\"Window\" />\n        </RadioGroup>\n        <Typography variant=\"h5\">Options</Typography>\n        <br/>\n        <br/>\n        {options}\n  </ToggleCard>\n    );\n  }\n}\n\nexport default withStyles(styles)(DrawControl);","import React, { Component } from 'react';\nimport { SketchField, Tools } from 'react-sketch';\n\nimport DrawControl from '../DrawControl';\n\nclass SketchBoard extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n        lineWidth: 10,\n        lineColor: 'black',\n        fillColor: '#68CCCA',\n        backgroundColor: 'transparent',\n        shadowWidth: 0,\n        shadowOffset: 0,\n        tool: Tools.Line,\n        enableRemoveSelected: false,\n        fillWithColor: false,\n        fillWithBackgroundColor: false,\n        drawings: [],\n        canUndo: false,\n        canRedo: false,\n        controlledSize: false,\n        sketchWidth: 600,\n        sketchHeight: 600,\n        stretched: true,\n        stretchedX: false,\n        stretchedY: false,\n        originX: 'left',\n        originY: 'top',\n        imageUrl: 'https://files.gamebanana.com/img/ico/sprays/4ea2f4dad8d6f.png',\n        expandTools: false,\n        expandControls: false,\n        expandColors: false,\n        expandBack: false,\n        expandImages: false,\n        expandControlled: false,\n        text: 'a text, cool!',\n        enableCopyPaste: false,\n    };\n\n   //  this.setLineColor = this.setLineColor.bind(this);\n   //  this.setTool = this.setTool.bind(this);\n   }\n\n   _selectTool = event => {\n      this.setState({\n         tool: event.target.value,\n         enableRemoveSelected: event.target.value === Tools.Select,\n         enableCopyPaste: event.target.value === Tools.Select\n      });\n   };\n\n   _save = () => {\n      let drawings = this.state.drawings;\n      drawings.push(this._sketch.toDataURL());\n      this.setState({ drawings: drawings });\n   };\n\n   _download = () => {\n      console.save(this._sketch.toDataURL(), 'toDataURL.txt');\n      console.save(JSON.stringify(this._sketch.toJSON()), 'toDataJSON.txt');\n\n      /*eslint-enable no-console*/\n\n      let { imgDown } = this.refs;\n      let event = new Event('click', {});\n\n      imgDown.href = this._sketch.toDataURL();\n      imgDown.download = 'toPNG.png';\n      imgDown.dispatchEvent(event);\n   };\n\n   _removeMe = index => {\n      let drawings = this.state.drawings;\n      drawings.splice(index, 1);\n      this.setState({ drawings: drawings });\n   };\n\n   undo = () => {\n      this._sketch.undo();\n      this.setState({\n         canUndo: this._sketch.canUndo(),\n         canRedo: this._sketch.canRedo(),\n      });\n   };\n\n   redo = () => {\n      this._sketch.redo();\n      this.setState({\n         canUndo: this._sketch.canUndo(),\n         canRedo: this._sketch.canRedo(),\n      });\n   };\n\n   clear = () => {\n      this._sketch.clear();\n      this._sketch.setBackgroundFromDataUrl('');\n      this.setState({\n         controlledValue: null,\n         backgroundColor: 'transparent',\n         fillWithBackgroundColor: false,\n         canUndo: this._sketch.canUndo(),\n         canRedo: this._sketch.canRedo(),\n      });\n   };\n\n   _removeSelected = () => {\n      this._sketch.removeSelected()\n   };\n\n   _onSketchChange = () => {\n      let prev = this.state.canUndo;\n      let now = this._sketch.canUndo();\n      if (prev !== now) {\n         this.setState({ canUndo: now });\n      }\n   };\n\n   _onBackgroundImageDrop = (accepted /*, rejected*/) => {\n      if (accepted && accepted.length > 0) {\n         let sketch = this._sketch;\n         let reader = new FileReader();\n         let { stretched, stretchedX, stretchedY, originX, originY } = this.state;\n         reader.addEventListener(\n            'load',\n            () =>\n               sketch.setBackgroundFromDataUrl(reader.result, {\n                  stretched: stretched,\n                  stretchedX: stretchedX,\n                  stretchedY: stretchedY,\n                  originX: originX,\n                  originY: originY,\n               }),\n            false,\n         );\n         reader.readAsDataURL(accepted[0]);\n      }\n   };\n\n   _addText = () => this._sketch.addText(this.state.text);\n\n   setLineColor = (color) => this.setState({ lineColor: color });\n\n   setTool = (tool) => this.setState({ tool });\n\n   componentDidMount = () => {\n      (function (console) {\n         console.save = function (data, filename) {\n            if (!data) {\n               console.error('Console.save: No data');\n               return;\n            }\n            if (!filename) filename = 'console.json';\n            if (typeof data === 'object') {\n               data = JSON.stringify(data, undefined, 4);\n            }\n            var blob = new Blob([data], { type: 'text/json' }),\n               e = document.createEvent('MouseEvents'),\n               a = document.createElement('a');\n            a.download = filename;\n            a.href = window.URL.createObjectURL(blob);\n            a.dataset.downloadurl = ['text/json', a.download, a.href].join(':');\n            e.initMouseEvent('click', true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);\n            a.dispatchEvent(e);\n         };\n      })(console);\n   };\n\n   predict = () => {\n      alert('Magic prediction!')\n   }\n  \n\n  render() {\n    let { controlledValue } = this.state;\n\n    return (\n      <div className=\"row\">\n        <div className=\"col-xs-7 col-sm-7 col-md-9 col-lg-9\">\n          <SketchField\n              name=\"sketch\"\n              className=\"canvas-area\"\n              ref={c => (this._sketch = c)}\n              lineColor={this.state.lineColor}\n              lineWidth={this.state.lineWidth}\n              fillColor={\n                this.state.fillWithColor\n                    ? this.state.fillColor\n                    : 'transparent'\n              }\n              backgroundColor={\n                this.state.fillWithBackgroundColor\n                    ? this.state.backgroundColor\n                    : 'transparent'\n              }\n              width={\n                this.state.controlledSize ? this.state.sketchWidth : null\n              }\n              height={\n                this.state.controlledSize ? this.state.sketchHeight : null\n              }\n            //   defaultValue={dataJson}\n              value={controlledValue}\n              forceValue\n              onChange={this._onSketchChange}\n              tool={this.state.tool}\n          />\n        </div>\n        <div className=\"col-xs-5 col-sm-5 col-md-3 col-lg-3\">\n          <DrawControl \n            lineColor={this.state.lineColor}\n            setLineColor={this.setLineColor = this.setLineColor.bind(this)}\n            setTool={this.setTool = this.setTool.bind(this)}\n            undo={this.undo.bind(this)}\n            redo={this.redo.bind(this)}\n            clear={this.clear.bind(this)}\n            canUndo={this.state.canUndo}\n            predict={this.predict.bind(this)}\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default SketchBoard;","import React from 'react';\nimport './App.css';\nimport SketchBoard from './components/SketchBoard';\nimport 'flexboxgrid';\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <SketchBoard />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}